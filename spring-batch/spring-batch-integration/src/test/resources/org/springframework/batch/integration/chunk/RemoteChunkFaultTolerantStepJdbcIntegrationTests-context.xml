<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:integration="http://www.springframework.org/schema/integration"
	   xmlns:batch="http://www.springframework.org/schema/batch"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:int-jdbc="http://www.springframework.org/schema/integration/jdbc"
	   xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	   xsi:schemaLocation="http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/integration https://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/batch https://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/integration/jdbc https://www.springframework.org/schema/integration/jdbc/spring-integration-jdbc.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

	<job id="job" xmlns="http://www.springframework.org/schema/batch">
		<step id="step">
			<tasklet>
				<chunk reader="reader" writer="writer" commit-interval="2" skip-limit="2" retry-limit="10">
					<retryable-exception-classes>
						<include class="org.springframework.dao.CannotAcquireLockException" />
					</retryable-exception-classes>
					<skippable-exception-classes>
						<include class="java.lang.IllegalStateException" />
					</skippable-exception-classes>
				</chunk>
			</tasklet>
		</step>
	</job>

	<bean id="reader" class="org.springframework.batch.integration.chunk.TestItemReader" scope="step">
		<property name="items">
			<list>
				<value>1</value>
				<value>2</value>
				<value>#{jobParameters['item.three']}</value>
				<value>4</value>
				<value>5</value>
				<value>6</value>
				<value>7</value>
				<value>8</value>
				<value>9</value>
			</list>
		</property>
	</bean>

	<bean id="writer" class="org.springframework.batch.integration.chunk.TestItemWriter" />

	<bean id="chunkWriter" class="org.springframework.batch.integration.chunk.ChunkMessageChannelItemWriter" scope="step">
		<property name="messagingOperations" ref="messagingGateway" />
		<property name="replyChannel" ref="replies" />
		<property name="maxWaitTimeouts" value="10" />
	</bean>

	<bean id="messagingGateway" class="org.springframework.integration.core.MessagingTemplate">
		<property name="defaultChannel" ref="requests" />
		<property name="receiveTimeout" value="1000" />
	</bean>

	<bean id="retryAdvice" class="org.springframework.retry.interceptor.RetryOperationsInterceptor">
		<property name="retryOperations">
			<bean class="org.springframework.retry.support.RetryTemplate">
				<property name="retryPolicy">
					<bean class="org.springframework.retry.policy.SimpleRetryPolicy">
						<constructor-arg value="10" />
						<constructor-arg>
							<map key-type="java.lang.Class" value-type="java.lang.Boolean">
								<entry key="org.springframework.dao.CannotAcquireLockException" value="true" />
							</map>
						</constructor-arg>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<!--
		The chunk writer listens for results coming back, and can fail to acquire a lock. This is especially true for
		in-memory databases (MySql and Oracle seem to deal with locks better)
	-->
	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="retryAdvice" pointcut="execution(* org.springframework.integration.core.MessagingTemplate.receive(..))" />
	</aop:config>

	<int-jdbc:message-store id="messageStore" data-source="dataSource" />

	<integration:channel id="requests">
		<integration:queue message-store="messageStore" />
	</integration:channel>
	<integration:channel id="replies">
		<integration:queue message-store="messageStore" />
	</integration:channel>
	<integration:service-activator input-channel="requests" output-channel="replies" ref="chunkHandler">
		<integration:poller fixed-delay="100">
			<integration:transactional isolation="READ_COMMITTED" />
		</integration:poller>
	</integration:service-activator>

	<bean id="chunkHandler" class="org.springframework.batch.integration.chunk.RemoteChunkHandlerFactoryBean">
		<property name="chunkWriter" ref="chunkWriter" />
		<property name="step" ref="step" />
	</bean>

	<jdbc:embedded-database id="dataSource" generate-name="true">
		<jdbc:script location="org/springframework/batch/core/schema-drop-hsqldb.sql"/>
		<jdbc:script location="org/springframework/integration/jdbc/schema-drop-hsqldb.sql"/>
		<jdbc:script location="org/springframework/batch/core/schema-hsqldb.sql"/>
		<jdbc:script location="org/springframework/integration/jdbc/schema-hsqldb.sql"/>
	</jdbc:embedded-database>

	<bean id="transactionManager" class="org.springframework.jdbc.support.JdbcTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<batch:job-repository id="jobRepository" />

	<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.TaskExecutorJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

</beans>
